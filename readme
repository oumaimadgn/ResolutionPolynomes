# Résolution d'Équations Polynômiales avec une Architecture Microservices

Ce projet vise à fournir une solution modulaire et extensible pour résoudre des équations polynomiales à l'aide d'une architecture basée sur les microservices. Le système intègre des technologies modernes comme **Spring Boot**, **Angular**, et des modèles avancés d'apprentissage automatique (LLMs) pour garantir performance et adaptabilité.

## Table des Matières

- [Description du Projet](#description-du-projet)
- [Technologies Utilisées](#technologies-utilisées)
- [Architecture](#architecture)
- [Fonctionnalités](#fonctionnalités)
- [Installation](#installation)
- [Utilisation](#utilisation)
- [Exemples Illustratifs](#exemples-illustratifs)
- [Contributeurs](#contributeurs)
- [Licence](#licence)

---

## Description du Projet

Cette application résout des équations polynomiales en utilisant des méthodes analytiques et numériques. Elle est conçue pour être scalable, modulaire, et capable d'intégrer facilement de nouvelles fonctionnalités. Deux types de méthodes sont prises en charge :
- **Méthodes Numériques** : Approches comme les formules de Cardan et Ferrari.
- **Méthodes Analytiques** : Techniques telles que Newton-Raphson et la méthode de bisection.

---

## Technologies Utilisées

- **Frontend** : Angular
- **Backend** : Spring Boot avec Spring Cloud Gateway
- **Service Discovery** : Netflix Eureka
- **LLMs** : Gemini 1.5 Flash de Google DeepMind
- **Base de Données** : PostgreSQL

---

## Architecture

L'application est divisée en plusieurs composants :
1. **Client REST API** : Angular envoie des requêtes utilisateur au backend.
2. **Passerelle** : Spring Cloud Gateway route les requêtes vers les microservices appropriés.
3. **Microservices** : Services indépendants pour traiter des tâches spécifiques.
4. **Service Discovery** : Netflix Eureka pour la découverte dynamique des microservices.

---

## Fonctionnalités

- Résolution de polynômes par degré (quadratiques, cubiques, quartiques, etc.).
- Approximation des racines via des méthodes analytiques.
- Routage intelligent des requêtes.
- Intégration d'un moteur d'apprentissage pour l'optimisation des solutions.

---

## Installation

1. **Backend**
   - Cloner ce dépôt.
   - Configurer le fichier `application.properties` pour la base de données.
   - Lancer les microservices avec Maven :
     ```bash
     mvn spring-boot:run
     ```

2. **Frontend**
   - Aller dans le répertoire Angular :
     ```bash
     cd frontend/
     ```
   - Installer les dépendances :
     ```bash
     npm install
     ```
   - Lancer l'application Angular :
     ```bash
     ng serve
     ```

---

## Utilisation

1. Accédez à l'interface utilisateur via `http://localhost:4200`.
2. Saisissez une équation polynomiale et sélectionnez la méthode de résolution souhaitée.
3. Obtenez les résultats affichés sur l'interface.

---

## Exemples Illustratifs

### Exemple 1 : Résolution d'un polynôme cubique
- Polynôme : \(x^3 - 6x^2 + 11x - 6 = 0\)
- Résultat : \(x = 1, x = 2, x = 3\)

---

## Contributeurs

- Imane Barakate
- Oumaima Dagoun
- Leila Mekiani
- Aya Nor Elyakine
- Badr Eddine Slioui
